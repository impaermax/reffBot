import sqlite3
from telebot import TeleBot, types
import csv
import os
from io import StringIO
from datetime import datetime, date
import threading
import time

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ---
API_TOKEN = '7827212867:AAFal1er6Z_voA_HgLA-pz1bM_yhl2jAGQI'
YOUR_ADMIN_ID = 1200223081  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot = TeleBot(API_TOKEN)
print("START===")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
DB_FILE = 'referrals.db'
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cursor = conn.cursor()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        balance REAL DEFAULT 0,
        hold_balance REAL DEFAULT 0,
        referrer_id INTEGER,
        referrals_count INTEGER DEFAULT 0
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS channels (
        channel_id INTEGER PRIMARY KEY,
        channel_name TEXT
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS stats (
        date TEXT PRIMARY KEY,
        new_users INTEGER DEFAULT 0,
        top_users TEXT
    )
    ''')
    conn.commit()

# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
def check_subscription(user_id):
    cursor.execute("SELECT channel_id, channel_name FROM channels")
    channels = cursor.fetchall()
    if not channels:
        return True
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [types.InlineKeyboardButton(text=f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @{channel[1]}", url=f"https://t.me/{channel[1]}") for channel in channels]
    buttons.append(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs"))
    markup.add(*buttons)
    
    for channel in channels:
        try:
            member = bot.get_chat_member(channel[0], user_id)
            if member.status not in ['member', 'creator', 'administrator']:
                bot.send_message(user_id, "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:", reply_markup=markup)
                return False
        except Exception as e:
            bot.send_message(user_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    return True

@bot.callback_query_handler(func=lambda call: call.data == "check_subs")
def check_subs_callback(call):
    user_id = call.from_user.id
    if check_subscription(user_id):
        bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        start_command(call.message)
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.", show_alert=True)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=['start'])
def start_command(message):
    if not check_subscription(message.from_user.id):
        return
    
    user_id = message.from_user.id
    referrer_id = None
    
    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
            if referrer_id == user_id:
                bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è.")
                return
        except ValueError:
            pass
    
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO users (user_id, referrer_id) VALUES (?, ?)", (user_id, referrer_id))
        conn.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        today = date.today().isoformat()
        cursor.execute("INSERT OR IGNORE INTO stats (date, new_users) VALUES (?, 0)", (today,))
        cursor.execute("UPDATE stats SET new_users = new_users + 1 WHERE date = ?", (today,))
        conn.commit()
        
        if referrer_id:
            cursor.execute("SELECT * FROM users WHERE user_id = ?", (referrer_id,))
            referrer = cursor.fetchone()
            if referrer:
                cursor.execute(
                    "UPDATE users SET hold_balance = hold_balance + 0.5, referrals_count = referrals_count + 1 WHERE user_id = ?",
                    (referrer_id,)
                )
                conn.commit()
                bot.send_message(
                    referrer_id,
                    f"‚ú® –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –ù–∞ –≤–∞—à —Ö–æ–ª–¥ –¥–æ–±–∞–≤–ª–µ–Ω–æ 0.5 –∑–≤–µ–∑–¥—ã. –ß—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å, –≤–∞—à –¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞."
                )
    
    referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã", "üí∏ –í—ã–≤–æ–¥")
    markup.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üèÜ –¢–æ–ø", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    
    bot.send_message(
        user_id, 
        f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!
–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã! ‚≠ê
üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{referral_link}
üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 0.5 –∑–≤–µ–∑–¥—ã (–ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π).
        """,
        reply_markup=markup
    )
    
    if referrer_id:
        check_and_unlock(referrer_id)

def check_and_unlock(referrer_id):
    cursor.execute("SELECT user_id FROM users WHERE referrer_id = ?", (referrer_id,))
    referrals = cursor.fetchall()
    for referral in referrals:
        cursor.execute("SELECT referrals_count FROM users WHERE user_id = ?", (referral[0],))
        sub_referrals = cursor.fetchone()
        if sub_referrals and sub_referrals[0] > 0:
            cursor.execute("SELECT hold_balance FROM users WHERE user_id = ?", (referrer_id,))
            user = cursor.fetchone()
            if user and user[0] > 0:
                hold_balance = user[0]
                cursor.execute(
                    "UPDATE users SET balance = balance + ?, hold_balance = 0 WHERE user_id = ?",
                    (hold_balance, referrer_id),
                )
                conn.commit()
                bot.send_message(
                    referrer_id,
                    f"‚úÖ {hold_balance:.1f} –∑–≤–µ–∑–¥ –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å!"
                )
                break
    cursor.execute("SELECT referrer_id FROM users WHERE user_id = ?", (referrer_id,))
    grand_referrer = cursor.fetchone()
    if grand_referrer and grand_referrer[0]:
        check_and_unlock(grand_referrer[0])

@bot.message_handler(func=lambda message: message.text == "‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã")
def show_balance_with_referral(message):
    user_id = message.from_user.id
    cursor.execute("SELECT balance, hold_balance FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start.")
        return
    
    balance, hold_balance = user
    referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    text = (
        "üë§ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"üîó –†–µ—Ñ. —Å—Å—ã–ª–∫–∞: {referral_link}\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π –ø–æ –Ω–µ–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤–µ–∑–¥—ã!\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"–ë–∞–ª–∞–Ω—Å:\n–ê–∫—Ç–∏–≤–Ω—ã–π - {balance:.1f} –∑–≤–µ–∑–¥\n–í —Ö–æ–ª–¥–µ - {hold_balance:.1f} –∑–≤–µ–∑–¥\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
    )
    
    try:
        with open('photo.jpg', 'rb') as photo_file:
            bot.send_photo(user_id, photo_file, caption=text)
    except FileNotFoundError:
        bot.send_message(user_id, "‚ùå –§–∞–π–ª photo.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        bot.send_message(user_id, text)

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def help_command(message):
    bot.send_message(
        message.from_user.id,
        """
üìã –°–ø—Ä–∞–≤–∫–∞:
- –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π —Å –ø–æ–º–æ—â—å—é –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.
- –ü–æ–ª—É—á–∞–π—Ç–µ 0.5 –∑–≤–µ–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ (–ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π).
- –ó–≤–µ–∑–¥—ã –∏–∑ —Ö–æ–ª–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –¥—Ä—É–≥ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞.
–ö–æ–º–∞–Ω–¥—ã:
- "‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã" ‚Äì –£–∑–Ω–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.
- "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.
- "üèÜ –¢–æ–ø" ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤.
- "üí∏ –í—ã–≤–æ–¥" ‚Äì –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ (–æ—Ç 15 –∑–≤–µ–∑–¥ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π). \n
 –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã @impaermax (–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã, GPT, –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –ò–ò)
        """
    )

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def stats_command(message):
    user_id = message.from_user.id
    cursor.execute("""
        SELECT referrals_count, 
               (SELECT COUNT(*) FROM users WHERE referrer_id = ? AND referrals_count > 0) AS active_referrals
        FROM users WHERE user_id = ?
    """, (user_id, user_id))
    stats = cursor.fetchone()
    if stats:
        referrals_count, active_referrals = stats
        bot.send_message(user_id, f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                                  f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}\n"
                                  f"‚úÖ –ò–∑ –Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_referrals}")
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start.")

@bot.message_handler(func=lambda message: message.text == "üèÜ –¢–æ–ø")
def leaderboard_command(message):
    cursor.execute("SELECT user_id, referrals_count FROM users ORDER BY referrals_count DESC LIMIT 10")
    leaders = cursor.fetchall()
    leaderboard_text = "üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:\n"
    for idx, (user_id, count) in enumerate(leaders, 1):
        try:
            user_info = bot.get_chat(user_id)
            name = user_info.first_name or "Unknown"
        except:
            name = "Unknown"
        leaderboard_text += f"{idx}. {name} - {count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
    bot.send_message(message.chat.id, leaderboard_text)

@bot.message_handler(func=lambda message: message.text == "üí∏ –í—ã–≤–æ–¥")
def withdraw_request(message):
    user_id = message.from_user.id
    cursor.execute("""
        SELECT balance, 
               (SELECT COUNT(*) FROM users WHERE referrer_id = ?) AS total_referrals,
               (SELECT COUNT(*) FROM users WHERE referrer_id = ? AND referrals_count > 0) AS active_referrals
        FROM users WHERE user_id = ?
    """, (user_id, user_id, user_id))
    data = cursor.fetchone()
    
    if not data or data[1] < 15 or data[2] < 15:
        bot.send_message(user_id, "‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –º–∏–Ω–∏–º—É–º 15 –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π.")
        return
    
    balance = data[0]
    if balance < 15:
        bot.send_message(user_id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 15 –∑–≤–µ–∑–¥.")
        return
    
    bot.send_message(user_id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤—ë–∑–¥:")
    bot.register_next_step_handler(message, process_withdraw_request)

def process_withdraw_request(message):
    username = message.text
    user_id = message.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]
    
    bot.send_message(YOUR_ADMIN_ID, f"-New Withdraw Request-\n"
                                    f"User: @{username} ({user_id})\n"
                                    f"Balance: {balance:.1f} stars")
    bot.send_message(user_id, f"üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n"
                              f"–ë–∞–ª–∞–Ω—Å: {balance:.1f} –∑–≤–µ–∑–¥\n"
                              f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: @GromovALX")

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user_id = message.from_user.id
    if user_id != YOUR_ADMIN_ID:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üìù –†–∞—Å—Å—ã–ª–∫–∞")
    markup.add("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏")
    markup.add("üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    markup.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and message.from_user.id == YOUR_ADMIN_ID)
def users_stats(message):
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM users WHERE referrals_count > 0")
    active_users = cursor.fetchone()[0]
    
    bot.send_message(
        message.chat.id,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        f"üë• –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_users}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö (—Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏): {active_users}"
    )

@bot.message_handler(func=lambda message: message.text == "üìù –†–∞—Å—Å—ã–ª–∫–∞" and message.from_user.id == YOUR_ADMIN_ID)
def start_mailing(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞–ª—å–±–æ–º):")
    bot.register_next_step_handler(message, process_mailing)

def process_mailing(message):
    if message.content_type == 'text':
        text = message.text
        photo_id = None
    elif message.content_type == 'photo':
        text = message.caption
        photo_id = message.photo[-1].file_id
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
        return
    
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    success_count = 0
    for user in users:
        try:
            if photo_id:
                bot.send_photo(user[0], photo_id, caption=text)
            else:
                bot.send_message(user[0], text)
            success_count += 1
        except:
            pass
    
    bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {len(users)}")

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏" and message.from_user.id == YOUR_ADMIN_ID)
def manage_channels(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
    markup.add("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" and message.from_user.id == YOUR_ADMIN_ID)
def add_channel(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channel_username –∏–ª–∏ https://t.me/channel_username:")
    bot.register_next_step_handler(message, process_add_channel)

def process_add_channel(message):
    channel_link = message.text.strip()
    if not channel_link.startswith('@') and not channel_link.startswith('https://t.me/'):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @channel_username –∏–ª–∏ https://t.me/channel_username.")
        return
    
    channel_name = channel_link.replace('https://t.me/', '').replace('@', '').strip()
    try:
        chat = bot.get_chat(f"@{channel_name}")
        member = bot.get_chat_member(chat.id, bot.get_me().id)
        if member.status != 'administrator':
            bot.send_message(message.chat.id, f"‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {chat.title}.")
            return
        
        cursor.execute("INSERT OR IGNORE INTO channels (channel_id, channel_name) VALUES (?, ?)", (chat.id, chat.username))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –ö–∞–Ω–∞–ª {chat.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª. –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª" and message.from_user.id == YOUR_ADMIN_ID)
def remove_channel(message):
    cursor.execute("SELECT channel_id, channel_name FROM channels")
    channels = cursor.fetchall()
    if not channels:
        bot.send_message(message.chat.id, "‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
        return
    
    markup = types.InlineKeyboardMarkup()
    for channel_id, channel_name in channels:
        markup.add(types.InlineKeyboardButton(f"@{channel_name}", callback_data=f"remove_channel_{channel_id}"))
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_channel_"))
def process_remove_channel(call):
    channel_id = int(call.data.split("_")[2])
    try:
        cursor.execute("DELETE FROM channels WHERE channel_id = ?", (channel_id,))
        conn.commit()
        bot.answer_callback_query(call.id, f"–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω.")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.send_message(call.message.chat.id, f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤" and message.from_user.id == YOUR_ADMIN_ID)
def list_channels(message):
    cursor.execute("SELECT channel_name FROM channels")
    channels = cursor.fetchall()
    if not channels:
        bot.send_message(message.chat.id, "‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
        return
    
    channels_text = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n" + "\n".join([f"- @{channel[0]}" for channel in channels])
    bot.send_message(message.chat.id, channels_text)

@bot.message_handler(func=lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" and message.from_user.id == YOUR_ADMIN_ID)
def back_to_main_menu(message):
    admin_panel(message)

@bot.message_handler(func=lambda message: message.text == "üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" and message.from_user.id == YOUR_ADMIN_ID)
def export_database(message):
    export_users_db(message.chat.id)

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
def export_users_db(chat_id):
    try:
        cursor.execute("""
            SELECT user_id, balance, hold_balance, referrer_id, referrals_count,
                   (SELECT COUNT(*) FROM users u2 WHERE u2.referrer_id = users.user_id AND u2.referrals_count > 0) AS active_referrals
            FROM users
        """)
        users_data = cursor.fetchall()
        if not users_data:
            bot.send_message(chat_id, "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞.")
            return

        csv_buffer = StringIO()
        csv_writer = csv.writer(csv_buffer)
        csv_writer.writerow(["User ID", "Balance", "Hold Balance", "Referrer ID", "Referrals Count", "Active Referrals"])
        
        for user in users_data:
            user_id, balance, hold_balance, referrer_id, referrals_count, active_referrals = user
            csv_writer.writerow([
                user_id, f"{balance:.1f}", f"{hold_balance:.1f}", 
                referrer_id if referrer_id else "None", referrals_count, active_referrals
            ])
        
        csv_buffer.seek(0)
        file_name = f"users_db_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.csv"
        bot.send_document(
            chat_id, 
            document=csv_buffer.getvalue().encode('utf-8'), 
            visible_file_name=file_name,
            caption="üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
        csv_buffer.close()
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

def send_daily_stats():
    while True:
        now = datetime.now()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ 00:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if now.hour == 0 and now.minute == 0:
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM users WHERE referrals_count > 0")
            active_users = cursor.fetchone()[0]
            today = date.today().isoformat()
            cursor.execute("SELECT new_users FROM stats WHERE date = ?", (today,))
            new_users = cursor.fetchone()
            new_users_count = new_users[0] if new_users else 0
            
            bot.send_message(
                YOUR_ADMIN_ID,
                f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({today}):\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
                f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {new_users_count}"
            )
            export_users_db(YOUR_ADMIN_ID)
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=send_daily_stats, daemon=True).start()

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ ---
if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        bot.send_message(YOUR_ADMIN_ID, f"‚ö†Ô∏è –ë–æ—Ç —É–ø–∞–ª: {str(e)}")
        raise  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª–∏
